import {
  createEntityAdapter,
  createSelector,
  createSlice,
  EntityState,
  PayloadAction,
} from "@reduxjs/toolkit";
import { AppThunk, RootState } from "../../app/store";

export interface Task {
  id: string;
  name: string;
  stage: number;
}

export const ASSEMBLY_FEATURE_KEY = "environics/assembly";

export interface AssemblyState extends EntityState<Task> {}

const assemblyAdapter = createEntityAdapter<Task>();

const initialState = assemblyAdapter.getInitialState({});

export const assemblySlice = createSlice({
  name: ASSEMBLY_FEATURE_KEY,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addNewTask: (state, action: PayloadAction<Task>) => {
      assemblyAdapter.addOne(state, action.payload);
    },
    removeTask: (state, action: PayloadAction<{ taskId: string }>) => {
      assemblyAdapter.removeOne(state, action.payload.taskId);
    },
    updateStage: (
      state,
      action: PayloadAction<{ taskId: string; stage: number }>
    ) => {
      // move to previous
      assemblyAdapter.updateOne(state, {
        id: action.payload.taskId,
        changes: {
          stage: action.payload.stage,
        },
      });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// below are the selectors for selecting the assembly
export const selectAssembly = (state: RootState) => state[ASSEMBLY_FEATURE_KEY];

const { selectAll, selectById } = assemblyAdapter.getSelectors();

export const selectTasks = createSelector(selectAssembly, selectAll);

export const selectTasksByStage = (stage: number) =>
  createSelector(selectTasks, (tasks) =>
    tasks.filter((task) => task.stage === stage)
  );

const { removeTask, updateStage, addNewTask } = assemblySlice.actions;

export const moveToNextStage =
  (taskId: string, stagesCount: number): AppThunk =>
  (dispatch, getState) => {
    const task = selectById(selectAssembly(getState()), taskId);
    if (!task) return;
    if (stagesCount <= task.stage + 1) {
      dispatch(
        removeTask({
          taskId,
        })
      );
    } else {
      dispatch(
        updateStage({
          stage: task.stage + 1,
          taskId,
        })
      );
    }
  };

export const moveToPrevStage =
  (taskId: string): AppThunk =>
  (dispatch, getState) => {
    const task = selectById(selectAssembly(getState()), taskId);
    if (!task) return;
    if (task.stage - 1 < 0) {
      dispatch(
        removeTask({
          taskId,
        })
      );
    } else {
      dispatch(
        updateStage({
          stage: task.stage - 1,
          taskId,
        })
      );
    }
  };

export const addTask = addNewTask;

export default assemblySlice.reducer;
